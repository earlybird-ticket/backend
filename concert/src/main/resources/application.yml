spring:
  application:
    name: concert-service
  config:
    import: optional:file:.env[.properties]
  kafka:
    bootstrap-servers: ${KAFKA_HOST}:${KAFKA_PORT}
  jpa:
    hibernate:
      ddl-auto: update
    database: postgresql
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  #    show-sql: true
  jackson:
    property-naming-strategy: SNAKE_CASE
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_CONCERT_PORT}/${POSTGRES_DB}
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}
server:
  port: 18085
  tomcat:
    mbeanregistry:
      enabled: true

eureka:
  instance:
    instance-id: ${spring.application.name}:${server.port}
    prefer-ip-address: true
    hostname: ${spring.application.name}
  client:
    service-url:
      defaultZone: http://${EUREKA_HOST:localhost}:${EUREKA_PORT:18080}/eureka


management:
  endpoints:
    jmx:
      exposure:
        include: prometheus
    web:
      exposure:
        include: refresh,health,beans,busrefresh,info,metrics,prometheus
  metrics:
    distribution:
      percentiles-histogram:
        all: true
    enable:
      jvm: true
  zipkin:
    tracing:
      endpoint: "http://${ZIPKIN_HOST:localhost}:${ZIPKIN_PORT:9411}/api/v2/spans"
  tracing:
    sampling:
      probability: ${ZIPKIN_SAMPLING_PROBABILITY:1.0}
  prometheus:
    metrics:
      export:
        enabled: true