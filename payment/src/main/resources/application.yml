spring:
  application:
    name: payment-service

  config:
    import: optional:file:.env[.properties]

  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}

  jackson:
    property-naming-strategy: SNAKE_CASE

  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PAYMENT_PORT:5432}/${POSTGRES_DB:postgres}
    username: ${POSTGRES_USER:postgres}
    password: ${POSTGRES_PASSWORD:postgres}

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true
        show_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect

  kafka:
    bootstrap-servers: localhost:29092
    consumer:
      group-id: order-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"

    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer


eureka:
  client:
    service-url:
      defaultZone: http://${EUREKA_SERVER_HOST:localhost}:${EUREKA_SERVER_PORT:18080}/eureka

server:
  port: ${PAYMENT_SERVER_PORT:18089}

toss:
  client-key: ${TOSS_CLIENT_KEY}
  secret-key: ${TOSS_SECRET_KEY}
  success-url: ${TOSS_SUCCESS_URL}
  fail-url: ${TOSS_FAIL_URL}

api:
  connection-timeout: 3000
  read-timeout: 120000
  max-buffer-size-MB: 300