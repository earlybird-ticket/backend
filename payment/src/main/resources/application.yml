spring:
  application:
    name: payment-service

  config:
    import: optional:file:.env[.properties]

  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}

  jackson:
    property-naming-strategy: SNAKE_CASE

  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PAYMENT_PORT:5432}/${POSTGRES_DB:postgres}
    username: ${POSTGRES_USER:postgres}
    password: ${POSTGRES_PASSWORD:postgres}

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        #        format_sql: true
        #        show_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect

  kafka:
    bootstrap-servers: ${KAFKA_HOST:localhost}:${KAFKA_PORT:29091},${KAFKA_HOST:localhost}:${KAFKA_PORT_2:29092},${KAFKA_HOST:localhost}:${KAFKA_PORT_3:29093}


eureka:
  client:
    initial-instance-info-replication-interval-seconds: 5  # 초기 등록 주기
    registry-fetch-interval-seconds: 5  # 레지스트리 갱신 주기 (기본 30초)
    service-url:
      defaultZone: http://${EUREKA_HOST:localhost}:${EUREKA_PORT:18080}/eureka

server:
  port: ${PAYMENT_SERVER_PORT:18089}
  tomcat:
    mbeanregistry:
      enabled: true

toss:
  client-key: ${TOSS_CLIENT_KEY}
  secret-key: ${TOSS_SECRET_KEY}
  success-url: ${TOSS_SUCCESS_URL}
  fail-url: ${TOSS_FAIL_URL}

api:
  connection-timeout: 3000
  read-timeout: 120000
  max-buffer-size-MB: 300